/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/hostels": {
    /** Show all hostels details */
    get: {
      responses: {
        /** @description A list of all hostels */
        200: {
          content: {
            "application/json": components["schemas"]["Hostel"][];
          };
        };
      };
    };
    /** Create a new hostel */
    post: {
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Hostel"];
        };
      };
      responses: {
        /** @description The created hostel */
        201: {
          content: {
            "application/json": components["schemas"]["Hostel"];
          };
        };
      };
    };
  };
  "/hostels/{id}": {
    /** Get a hostel by ID */
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description The hostel data */
        200: {
          content: {
            "application/json": components["schemas"]["Hostel"];
          };
        };
      };
    };
    /** Update a hostel by ID */
    put: {
      parameters: {
        path: {
          id: number;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Hostel"];
        };
      };
      responses: {
        /** @description The updated hostel */
        200: {
          content: {
            "application/json": components["schemas"]["Hostel"];
          };
        };
      };
    };
    /** Delete a hostel by ID */
    delete: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description The hostel was deleted */
        204: {
          content: never;
        };
      };
    };
  };
  "/hostels/{id}/rooms": {
    /** List all rooms */
    get: {
      responses: {
        /** @description A list of rooms */
        200: {
          content: {
            "application/json": components["schemas"]["Room"][];
          };
        };
      };
    };
    /** Create a new room */
    post: {
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Room"];
        };
      };
      responses: {
        /** @description The created room */
        201: {
          content: {
            "application/json": components["schemas"]["Room"];
          };
        };
      };
    };
  };
  "/hostels/{id}/rooms/{roomId}": {
    /** Get a room by ID */
    get: {
      parameters: {
        path: {
          id: number;
          roomId: number;
        };
      };
      responses: {
        /** @description The room data */
        200: {
          content: {
            "application/json": components["schemas"]["Room"];
          };
        };
      };
    };
    /** Update a room by ID */
    put: {
      parameters: {
        path: {
          id: number;
          roomId: number;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Room"];
        };
      };
      responses: {
        /** @description The updated room */
        200: {
          content: {
            "application/json": components["schemas"]["Room"];
          };
        };
      };
    };
    /** Delete a room by ID */
    delete: {
      parameters: {
        path: {
          id: number;
          roomId: number;
        };
      };
      responses: {
        /** @description The room was deleted */
        204: {
          content: never;
        };
      };
    };
  };
  "/swap-requests": {
    /** Show all swap requests */
    get: {
      responses: {
        /** @description A list of swap requests */
        200: {
          content: {
            "application/json": components["schemas"]["ExchangeRequest"][];
          };
        };
      };
    };
  };
  "/swap-requests/{id}": {
    /** Accept or reject a swap request */
    put: {
      parameters: {
        path: {
          id: number;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            /** @enum {string} */
            status?: "ACCEPTED" | "REJECTED";
          };
        };
      };
      responses: {
        /** @description The updated swap request */
        200: {
          content: {
            "application/json": components["schemas"]["ExchangeRequest"];
          };
        };
      };
    };
  };
  "/allocate-students": {
    /** Allocate students to hostels */
    post: {
      requestBody?: {
        content: {
          "application/json": {
            /** @enum {string} */
            method?: "manual" | "random";
            allocations?: {
                studentId?: string;
                hostelId?: number;
              }[];
          };
        };
      };
      responses: {
        /** @description Students allocated to hostels */
        200: {
          content: {
            "application/json": {
              message?: string;
            };
          };
        };
      };
    };
  };
  "/users": {
    /** List all users */
    get: {
      responses: {
        /** @description A list of users */
        200: {
          content: {
            "application/json": components["schemas"]["User"][];
          };
        };
      };
    };
    /** Create a new user */
    post: {
      requestBody?: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      responses: {
        /** @description The created user */
        201: {
          content: {
            "application/json": components["schemas"]["User"];
          };
        };
      };
    };
  };
  "/users/{id}": {
    /** Get a user by ID */
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description The user data */
        200: {
          content: {
            "application/json": components["schemas"]["User"];
          };
        };
      };
    };
    /** Update a user by ID */
    put: {
      parameters: {
        path: {
          id: number;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      responses: {
        /** @description The updated user */
        200: {
          content: {
            "application/json": components["schemas"]["User"];
          };
        };
      };
    };
    /** Delete a user by ID */
    delete: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description The user was deleted */
        204: {
          content: never;
        };
      };
    };
  };
  "/students": {
    /** List all students */
    get: {
      responses: {
        /** @description A list of students */
        200: {
          content: {
            "application/json": components["schemas"]["Student"][];
          };
        };
      };
    };
    /** Create a new student */
    post: {
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Student"];
        };
      };
      responses: {
        /** @description The created student */
        201: {
          content: {
            "application/json": components["schemas"]["Student"];
          };
        };
      };
    };
  };
  "/students/{id}": {
    /** Get a student by ID */
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description The student data */
        200: {
          content: {
            "application/json": components["schemas"]["Student"];
          };
        };
      };
    };
    /** Update a student by ID */
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Student"];
        };
      };
      responses: {
        /** @description The updated student */
        200: {
          content: {
            "application/json": components["schemas"]["Student"];
          };
        };
      };
    };
    /** Delete a student by ID */
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description The student was deleted */
        204: {
          content: never;
        };
      };
    };
  };
  "/private-boarding-owners": {
    /** List all private boarding owners */
    get: {
      responses: {
        /** @description A list of private boarding owners */
        200: {
          content: {
            "application/json": components["schemas"]["PrivateBoardingOwner"][];
          };
        };
      };
    };
    /** Create a new private boarding owner */
    post: {
      requestBody?: {
        content: {
          "application/json": components["schemas"]["PrivateBoardingOwner"];
        };
      };
      responses: {
        /** @description The created private boarding owner */
        201: {
          content: {
            "application/json": components["schemas"]["PrivateBoardingOwner"];
          };
        };
      };
    };
  };
  "/private-boarding-owners/{id}": {
    /** Get a private boarding owner by ID */
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description The private boarding owner data */
        200: {
          content: {
            "application/json": components["schemas"]["PrivateBoardingOwner"];
          };
        };
      };
    };
    /** Update a private boarding owner by ID */
    put: {
      parameters: {
        path: {
          id: number;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["PrivateBoardingOwner"];
        };
      };
      responses: {
        /** @description The updated private boarding owner */
        200: {
          content: {
            "application/json": components["schemas"]["PrivateBoardingOwner"];
          };
        };
      };
    };
    /** Delete a private boarding owner by ID */
    delete: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description The private boarding owner was deleted */
        204: {
          content: never;
        };
      };
    };
  };
  "/hostels/search": {
    /** Search hostels */
    get: {
      parameters: {
        query?: {
          location?: string;
          gender?: "MALE" | "FEMALE" | "MIXED";
          year?: "FIRST" | "SECOND" | "THIRD" | "FOURTH";
        };
      };
      responses: {
        /** @description List of hostels matching the search criteria */
        200: {
          content: {
            "application/json": {
                hostel?: components["schemas"]["Hostel"];
                rooms?: components["schemas"]["Room"][];
              }[];
          };
        };
      };
    };
  };
  "/exchange-requests/{id}/update-state": {
    /** Update exchange request state to available */
    put: {
      parameters: {
        path: {
          id: number;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            /** @enum {string} */
            status?: "AVAILABLE";
          };
        };
      };
      responses: {
        /** @description The updated exchange request */
        200: {
          content: {
            "application/json": components["schemas"]["ExchangeRequest"];
          };
        };
      };
    };
  };
  "/apply-hostel": {
    /** Apply for a hostel */
    post: {
      requestBody?: {
        content: {
          "application/json": {
            hostelId?: number;
            studentId?: string;
          };
        };
      };
      responses: {
        /** @description Applied for hostel */
        201: {
          content: {
            "application/json": {
              message?: string;
            };
          };
        };
      };
    };
  };
  "/apply-exchange": {
    /** Apply for an exchange */
    post: {
      requestBody?: {
        content: {
          "application/json": {
            fromUserId?: string;
            toUserId?: string;
          };
        };
      };
      responses: {
        /** @description Applied for exchange */
        201: {
          content: {
            "application/json": {
              message?: string;
            };
          };
        };
      };
    };
  };
  "/account": {
    /** Show account details */
    get: {
      parameters: {
        query: {
          userId: string;
        };
      };
      responses: {
        /** @description The user account details */
        200: {
          content: {
            "application/json": components["schemas"]["User"];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    User: {
      id?: number;
      username?: string;
      password?: string;
      /** @enum {string} */
      role?: "ADMIN" | "PRIVATE_BOARDING_OWNER" | "STANDARD_USER";
    };
    /** @enum {string} */
    Role: "ADMIN" | "PRIVATE_BOARDING_OWNER" | "STANDARD_USER";
    Student: {
      studentId?: string;
      email?: string;
      phone_number?: string;
      userId?: number;
    };
    PrivateBoardingOwner: {
      id?: number;
      email?: string;
      phone_number?: string;
      userId?: number;
    };
    Hostel: {
      id?: number;
      hostelName?: string;
      /** @enum {string} */
      genderType?: "MALE" | "FEMALE" | "MIXED";
      /** @enum {string} */
      year?: "FIRST" | "SECOND" | "THIRD" | "FOURTH";
    };
    Room: {
      id?: number;
      capacity?: number;
      beds?: number;
      hostelId?: number;
    };
    RoomAllocation: {
      id?: number;
      /** @enum {string} */
      status?: "ALLOCATED" | "AVAILABLE" | "REQUESTED";
      roomId?: number;
      studentId?: string;
    };
    ExchangeRequest: {
      id?: number;
      /** @enum {string} */
      status?: "PENDING" | "ACCEPTED" | "REJECTED";
      fromUserId?: string;
      toUserId?: string;
    };
    PrivateBoarding: {
      id?: number;
      boardingName?: string;
      location?: string;
      ownerId?: number;
    };
    BoardingRoom: {
      id?: number;
      capacity?: number;
      facilities?: string;
      boardingId?: number;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
