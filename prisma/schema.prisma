generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                       Int               @id @default(autoincrement())
  username                 String
  password                 String
  email                    String
  userType                 UserType
  phone_number             String
  roomAllocations          RoomAllocation[]
  PrivateBoarding          PrivateBoarding[]
  ExchangeRequestsFromUser ExchangeRequest[] @relation("FromUser")
  ExchangeRequestsToUser   ExchangeRequest[] @relation("ToUser")
}

enum UserType {
  STUDENT
  ADMIN
  PRIVATE_BOARDING_OWNER
}

model Hostel {
  id         Int        @id @default(autoincrement())
  hostelName String
  genderType GenderType
  year       Year
  rooms      Room[]
}

enum GenderType {
  MALE
  FEMALE
  MIXED
}

enum Year {
  FIRST
  SECOND
  THIRD
  FOURTH
}

model Room {
  id              Int              @id @default(autoincrement())
  capacity        Int
  facilities      String
  hostel          Hostel           @relation(fields: [hostelId], references: [id])
  hostelId        Int
  roomAllocations RoomAllocation[]
}

model RoomAllocation {
  id     Int              @id @default(autoincrement())
  status AllocationStatus
  room   Room             @relation(fields: [roomId], references: [id])
  roomId Int
  user   User             @relation(fields: [userId], references: [id])
  userId Int
}

enum AllocationStatus {
  ALLOCATED
  AVAILABLE
  REQUESTED
}

model ExchangeRequest {
  id         Int           @id @default(autoincrement())
  status     RequestStatus
  fromUser   User          @relation("FromUser", fields: [fromUserId], references: [id])
  fromUserId Int
  toUser     User          @relation("ToUser", fields: [toUserId], references: [id])
  toUserId   Int
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model PrivateBoarding {
  id            Int            @id @default(autoincrement())
  boardingName  String
  location      String
  owner         User           @relation(fields: [ownerId], references: [id])
  ownerId       Int
  boardingRooms BoardingRoom[]
}

model BoardingRoom {
  id         Int             @id @default(autoincrement())
  capacity   Int
  facilities String
  boarding   PrivateBoarding @relation(fields: [boardingId], references: [id])
  boardingId Int
}
