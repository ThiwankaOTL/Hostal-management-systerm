generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int                    @id @default(autoincrement())
  username             String
  password             String
  role                 Role
  Student              Student[]
  PrivateBoardingOwner PrivateBoardingOwner[]
}

enum Role {
  ADMIN
  PRIVATE_BOARDING_OWNER
  STANDARD_USER
}

model Student {
  studentId                String            @id @unique
  email                    String
  phone_number             String
  roomAllocations          RoomAllocation[]
  ExchangeRequestsFromUser ExchangeRequest[] @relation("FromUser")
  ExchangeRequestsToUser   ExchangeRequest[] @relation("ToUser")
  user                     User              @relation(fields: [userId], references: [id])
  userId                   Int
}

model PrivateBoardingOwner {
  id              Int               @id @default(autoincrement())
  email           String
  phone_number    String
  PrivateBoarding PrivateBoarding[]
  user            User              @relation(fields: [userId], references: [id])
  userId          Int
}

model Hostel {
  id         Int        @id @default(autoincrement())
  hostelName String
  genderType GenderType
  year       Year
  rooms      Room[]
}

enum GenderType {
  MALE
  FEMALE
  MIXED
}

enum Year {
  FIRST
  SECOND
  THIRD
  FOURTH
}

model Room {
  id              Int              @id @default(autoincrement())
  capacity        Int
  beds            Int
  hostel          Hostel           @relation(fields: [hostelId], references: [id])
  hostelId        Int
  roomAllocations RoomAllocation[]
}

model RoomAllocation {
  id        Int              @id @default(autoincrement())
  status    AllocationStatus
  room      Room             @relation(fields: [roomId], references: [id])
  roomId    Int
  student   Student          @relation(fields: [studentId], references: [studentId])
  studentId String
}

enum AllocationStatus {
  ALLOCATED
  AVAILABLE
  REQUESTED
}

model ExchangeRequest {
  id         Int           @id @default(autoincrement())
  status     RequestStatus
  fromUser   Student       @relation("FromUser", fields: [fromUserId], references: [studentId])
  fromUserId String
  toUser     Student       @relation("ToUser", fields: [toUserId], references: [studentId])
  toUserId   String
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model PrivateBoarding {
  id            Int                  @id @default(autoincrement())
  boardingName  String
  location      String
  owner         PrivateBoardingOwner @relation(fields: [ownerId], references: [id])
  ownerId       Int
  boardingRooms BoardingRoom[]
}

model BoardingRoom {
  id         Int             @id @default(autoincrement())
  capacity   Int
  facilities String
  boarding   PrivateBoarding @relation(fields: [boardingId], references: [id])
  boardingId Int
}
